name: AI 日报数据收集

on:
  # 定时任务：每天早上8点和晚上8点 (北京时间)
  schedule:
    - cron: '0 0 * * *'    # 早上8点北京时间 (UTC 0点)
    - cron: '0 12 * * *'   # 晚上8点北京时间 (UTC 12点)
  
  # 允许手动触发
  workflow_dispatch:
    inputs:
      sources:
        description: '指定爬取源 (多个用逗号分隔，如: arxiv,github)'
        required: false
        default: 'all'
        type: choice
        options:
          - all
          - arxiv
          - github
          - rss
          - papers-with-code
          - stackoverflow
          - arxiv,github
          - arxiv,rss
          - github,rss
      use_source_config:
        description: '使用智能源配置 (推荐)'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      max_results:
        description: '统一最大结果数 (仅当关闭智能配置时使用)'
        required: false
        default: '10'
        type: string
      continue_on_error:
        description: '遇到错误时继续执行其他源'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'
      runner_type:
        description: 'Runner 类型选择'
        required: false
        default: 'github-hosted'
        type: choice
        options:
          - 'github-hosted'
          - 'self-hosted'

jobs:
  collect-data:
    # 动态选择 runner 类型
    runs-on: ${{ github.event.inputs.runner_type == 'self-hosted' && 'self-hosted' || 'ubuntu-22.04' }}
    timeout-minutes: 25    # 稍微减少超时时间，更快检测问题
    
    # 添加环境优化
    env:
      NODE_OPTIONS: '--max-old-space-size=4096'  # 增加 Node.js 内存限制
      FORCE_COLOR: '1'  # 强制彩色输出，便于调试
    
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
      
      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      
      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'
      
      - name: 安装依赖
        run: |
          echo "安装依赖开始时间: $(date)"
          pnpm install
          echo "安装依赖完成时间: $(date)"
      
      - name: 编译 TypeScript 脚本
        run: |
          echo "开始编译 TypeScript 文件..."
          rm -rf dist/scripts/
          mkdir -p dist/scripts/
          npx tsc scripts/collectDataToSupabase.ts --outDir dist/scripts --module commonjs --target es2020 --esModuleInterop true --allowSyntheticDefaultImports true --skipLibCheck true --declaration false
          echo "编译完成"
          echo "检查编译输出:"
          find dist/scripts/ -name "*.js" -type f
      
      - name: 配置环境变量
        run: |
          echo "NODE_ENV=production" >> $GITHUB_ENV
          echo "TZ=Asia/Shanghai" >> $GITHUB_ENV
      
      - name: 环境信息
        run: |
          echo "Node.js: $(node --version)"
          echo "pnpm: $(pnpm --version)"
          echo "系统: $(uname -r)"
      
      - name: 验证环境变量
        run: |
          echo "验证关键环境变量..."
          [ -n "$SUPABASE_URL" ] && echo "✅ SUPABASE_URL" || echo "❌ SUPABASE_URL"
          [ -n "$SUPABASE_ANON_KEY" ] && echo "✅ SUPABASE_ANON_KEY" || echo "❌ SUPABASE_ANON_KEY"
          [ -n "$SUPABASE_SERVICE_ROLE_KEY" ] && echo "✅ SUPABASE_SERVICE_ROLE_KEY" || echo "❌ SUPABASE_SERVICE_ROLE_KEY"
          [ -n "$GH_TOKEN" ] && echo "✅ GH_TOKEN" || echo "❌ GH_TOKEN"
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
      
      - name: 运行数据收集
        env:
          SUPABASE_URL: ${{ secrets.SUPABASE_URL }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "开始运行数据收集..."
          
          # 构建命令参数
          SOURCES="${{ github.event.inputs.sources || 'all' }}"
          USE_SOURCE_CONFIG="${{ github.event.inputs.use_source_config || 'true' }}"
          MAX_RESULTS="${{ github.event.inputs.max_results || '10' }}"
          CONTINUE_ON_ERROR="${{ github.event.inputs.continue_on_error || 'true' }}"
          
          # 查找编译后的脚本文件
          SCRIPT_FILE=$(find dist/scripts/ -name "collectDataToSupabase.js" -type f | head -1)
          
          if [ -z "$SCRIPT_FILE" ]; then
            echo "❌ 未找到编译后的脚本文件"
            exit 1
          fi
          
          echo "✅ 找到脚本文件: $SCRIPT_FILE"
          
          CMD="node $SCRIPT_FILE"
          CMD="$CMD --sources=$SOURCES"
          CMD="$CMD --timeout=25"
          CMD="$CMD --verbose"
          
          if [ "$USE_SOURCE_CONFIG" = "true" ]; then
            CMD="$CMD --use-source-config"
          else
            CMD="$CMD --max-results=$MAX_RESULTS"
          fi
          
          if [ "$CONTINUE_ON_ERROR" = "true" ]; then
            CMD="$CMD --continue-on-error"
          fi
          
          echo "执行命令: $CMD"
          eval $CMD
      
      - name: 任务完成状态
        if: always()
        run: |
          echo "=== 任务执行完成 ==="
          echo "完成时间: $(date '+%Y-%m-%d %H:%M:%S %Z')"
          echo "触发方式: ${{ github.event_name }}"
          
          if [ -f collection_log.txt ]; then
            echo "收集结果概览:"
            tail -10 collection_log.txt
          fi 